openapi: 3.0.1
info:
  title: Shopping API
  description: API for Shopping server application
  termsOfService: ""
  contact:
    name: Shopping Development Team
    email: hankdjambong@gmail.com
  license:
    name: ""
    url: ""
  version: 0.0.1
externalDocs:
  description: Shopping Documentation
  url: mailto:hankdjambong@gmail.com
servers:
  - url: http://localhost:7000
    description: Generated server url
paths:
  /api/v1/user/register:
    post:
      tags:
        - User
      summary: Register a user
      operationId: postUserRegistrationRequest
      requestBody:
        content:
          application/xml:
            schema:
              type: string
        required: true
      responses:
        200:
          description: User registered successfully
        400:
          description: Bad Request
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/v1/purchase:
    get:
      tags:
        - Purchase
      summary: Get purchases from last n days
      operationId: getPurchasesFromPassedDays
      parameters:
        - name: days
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 7
      responses:
        200:
          description: Last week purchases extracted successfully
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Purchases'
        400:
          description: Bad Request
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
    post:
      tags:
        - Purchase
      summary: Perform purchase
      operationId: getItemPage
      requestBody:
        content:
          application/xml:
            schema:
              type: string
        required: true
      responses:
        200:
          description: Purchase performed successfully
        400:
          description: Bad Request
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/v1/user:
    get:
      tags:
        - User
      summary: Get all users
      operationId: getAllUsers
      responses:
        200:
          description: All users fetched successfully
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Users'
        400:
          description: Bad Request
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/v1/purchase/page/{index}/{offset}:
    get:
      tags:
        - Purchase
      summary: Get purchases page
      operationId: getPurchasePage
      parameters:
        - name: index
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: offset
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: Purchase page extracted successfully
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Purchases'
        400:
          description: Bad Request
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
        404:
          description: Not found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/v1/item/page/{index}/{offset}:
    get:
      tags:
        - Item
      summary: Get items page
      operationId: getItemPage_1
      parameters:
        - name: index
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: offset
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: Item page extracted successfully
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Items'
        400:
          description: Bad Request
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
        404:
          description: Not found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/v1/item/best-seller-for-18-years-old:
    get:
      tags:
        - Item
      summary: Get most purchased item for 18 years old customers
      operationId: getBestSellerItemFor18YearsOldCustomers
      responses:
        200:
          description: Most purchased item years old customers was extracted successfully
          content:
            text/plain:
              schema:
                type: string
        400:
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/v1/item/best-seller:
    get:
      tags:
        - Item
      summary: Get most purchased item from last 30 days
      operationId: getMonthlyBestSellerItem
      responses:
        200:
          description: Most purchased item name was extracted successfully
          content:
            text/plain:
              schema:
                type: string
        400:
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/v1/item/available:
    get:
      tags:
        - Item
      summary: Get items available for sale
      operationId: getAvailableItems
      responses:
        200:
          description: All items available for sale extracted successfully
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Items'
        400:
          description: Bad Request
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/v1/item:
    get:
      tags:
        - Item
      summary: Get all items
      operationId: getAllItems
      responses:
        200:
          description: All items extracted successfully
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Items'
        400:
          description: Bad Request
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/v1/customer/page/{index}/{offset}:
    get:
      tags:
        - Customer
      summary: Get customers page
      operationId: getCustomerPage
      parameters:
        - name: index
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: offset
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: Customer page extracted successfully
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Customers'
        400:
          description: Bad Request
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
        404:
          description: Not found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/v1/customer/best-customer:
    get:
      tags:
        - Item
      summary: Get customer with most purchased from last 6 months
      operationId: get6MonthsBestCustomer
      responses:
        200:
          description: Customer with most purchased from last 6 months was extracted
            successfully
          content:
            text/plain:
              schema:
                type: string
        400:
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/v1/customer:
    get:
      tags:
        - Customer
      summary: Get all customers
      operationId: getAllCustomers
      responses:
        200:
          description: All customers extracted successfully
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Customers'
        400:
          description: Bad Request
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
  /**/{path}:
    get:
      tags:
        - Website
      summary: Redirect to website
      operationId: redirect_2
      responses:
        200:
          description: Website accessed successfully
          content:
            '*/*':
              schema:
                type: string
        400:
          description: Bad Request
          content:
            '*/*':
              schema:
                type: string
    put:
      tags:
        - Website
      summary: Redirect to website
      operationId: redirect_3
      responses:
        200:
          description: Website accessed successfully
          content:
            '*/*':
              schema:
                type: string
        400:
          description: Bad Request
          content:
            '*/*':
              schema:
                type: string
    post:
      tags:
        - Website
      summary: Redirect to website
      operationId: redirect_5
      responses:
        200:
          description: Website accessed successfully
          content:
            '*/*':
              schema:
                type: string
        400:
          description: Bad Request
          content:
            '*/*':
              schema:
                type: string
    delete:
      tags:
        - Website
      summary: Redirect to website
      operationId: redirect
      responses:
        200:
          description: Website accessed successfully
          content:
            '*/*':
              schema:
                type: string
        400:
          description: Bad Request
          content:
            '*/*':
              schema:
                type: string
    options:
      tags:
        - Website
      summary: Redirect to website
      operationId: redirect_1
      responses:
        200:
          description: Website accessed successfully
          content:
            '*/*':
              schema:
                type: string
        400:
          description: Bad Request
          content:
            '*/*':
              schema:
                type: string
    head:
      tags:
        - Website
      summary: Redirect to website
      operationId: redirect_4
      responses:
        200:
          description: Website accessed successfully
          content:
            '*/*':
              schema:
                type: string
        400:
          description: Bad Request
          content:
            '*/*':
              schema:
                type: string
    patch:
      tags:
        - Website
      summary: Redirect to website
      operationId: redirect_6
      responses:
        200:
          description: Website accessed successfully
          content:
            '*/*':
              schema:
                type: string
        400:
          description: Bad Request
          content:
            '*/*':
              schema:
                type: string
components:
  schemas:
    ApiError:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          description: Error code
          example: "123"
        message:
          type: string
          description: Error message
          example: Invalid field value
    GrantedAuthority:
      type: object
      properties:
        authority:
          type: string
    User:
      required:
        - password
        - role
        - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        role:
          type: string
          enum:
            - USER
        accountNonLocked:
          type: boolean
        authorities:
          type: array
          items:
            $ref: '#/components/schemas/GrantedAuthority'
        accountNonExpired:
          type: boolean
        credentialsNonExpired:
          type: boolean
        enabled:
          type: boolean
    Users:
      type: object
      properties:
        User:
          type: array
          items:
            $ref: '#/components/schemas/User'
    Customer:
      required:
        - birthday
        - id
        - lastName
        - name
        - username
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        lastName:
          type: string
        birthday:
          type: string
          format: date-time
        username:
          type: string
    Item:
      required:
        - amount
        - id
        - insertionDate
        - name
        - quantity
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        amount:
          type: number
        quantity:
          type: integer
          format: int32
        insertionDate:
          type: string
          format: date-time
    Purchase:
      required:
        - amount
        - count
        - customer
        - id
        - item
        - purchaseDate
      type: object
      properties:
        id:
          type: string
          format: uuid
        count:
          type: integer
          format: int32
        amount:
          type: number
        purchaseDate:
          type: string
          format: date
        item:
          $ref: '#/components/schemas/Item'
        customer:
          $ref: '#/components/schemas/Customer'
    Purchases:
      type: object
      properties:
        Purchase:
          type: array
          items:
            $ref: '#/components/schemas/Purchase'
    Items:
      type: object
      properties:
        Item:
          type: array
          items:
            $ref: '#/components/schemas/Item'
    Customers:
      type: object
      properties:
        Customer:
          type: array
          items:
            $ref: '#/components/schemas/Customer'
